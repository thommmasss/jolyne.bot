# python main.py
import time
import telebot
import random
import requests
import atexit
from notifiers import get_notifier
from bs4 import BeautifulSoup
from selenium import webdriver
from time import sleep
from telebot import types, apihelper
import sqlite3
import config

bot = telebot.TeleBot(config.TOKEN)
driver = webdriver.Edge()
telegram = get_notifier('telegram')


def bot_online():
    try:
        connect = sqlite3.connect('bot.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS chats (
            id INTEGER
        )""")
        connect.commit()
        all_results = []
        cursor.execute("SELECT id FROM chats")
        for i in cursor.execute("SELECT id FROM chats"):
            all_results += i
        connect.commit()
        for i in range(0, len(all_results)):
            telegram.notify(token=config.TOKEN, chat_id=all_results[i], message="–î–æ–±—Ä–æ–µ —É—Ç—Ä–æüòá")
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


bot_online()


def first():  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ú–æ—è –¥–ª–∏–Ω–∞ üçÜ')
    item2 = types.KeyboardButton('–ö–∞–∫ –¥–µ–ª–∞?üòä')
    item3 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ...üòè')
    item4 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ—É üìÇ')
    item5 = types.KeyboardButton('–ü–æ—Å–æ–≤–µ—Ç—É–π —Ñ–∏–ª—å–º üé•')
    item6 = types.KeyboardButton('–î–∞–ª—å—à–µ ‚û°')
    markup.add(item1, item2, item3, item4, item5, item6)
    return markup


def db_chats(message):
    try:
        connect = sqlite3.connect('bot.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS chats (
            id INTEGER
        )""")
        connect.commit()
        chat_id = message.chat.id
        cursor.execute(f"SELECT id FROM chats WHERE id = '{chat_id}'")
        if cursor.fetchone() is None:
            cursor.execute("INSERT INTO chats VALUES(?)", [chat_id])
        connect.commit()
        cursor.execute(f"""CREATE TABLE IF NOT EXISTS '{chat_id}' (
            id INTEGER,
            username TEXT
        )""")
        user_id = message.from_user.id
        user_username = '@' + message.from_user.username
        cursor.execute(f"SELECT id FROM '{chat_id}' WHERE id = '{user_id}'")
        if cursor.fetchone() is None:
            cursor.execute(f"INSERT INTO '{chat_id}' VALUES(?, ?)", (user_id, user_username))
        else:
            cursor.execute(f"UPDATE '{chat_id}' SET username = '{user_username}' WHERE id = '{user_id}'")
        connect.commit()
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def db_profile(message):
    try:
        connect = sqlite3.connect('bot.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS users (
            id INTEGER,
            username TEXT,
            About TEXT,
            Steam TEXT,
            Discord TEXT,
            VK TEXT,
            YouTube TEXT,
            Twitch TEXT,
            Twitter TEXT,
            Pinterest TEXT,
            Tg_channel TEXT,
            Epic_Games TEXT,
            Site TEXT,
            Tic_Tok TEXT
        )""")
        connect.commit()
        user_id = message.from_user.id
        user_username = '@' + message.from_user.username
        cursor.execute(f"SELECT id FROM users WHERE id = '{user_id}'")
        if cursor.fetchone() is None:
            cursor.execute(f"INSERT INTO users VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                           (user_id, user_username, '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ\
', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'))
        else:
            cursor.execute(f"UPDATE users SET username = '{user_username}' WHERE id = '{user_id}'")
        connect.commit()
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def info_profile(message):
    try:
        db_chats(message)
        db_profile(message)
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))
    try:
        connect = sqlite3.connect('bot.db')
        cursor = connect.cursor()
        last_name = lambda x: x if str(x) != 'None' else ''
        if '@' in message.text:
            user_username = message.text
            cursor.execute(f"SELECT * FROM users WHERE username = '{user_username}'")
            connect.commit()
            if cursor.fetchone() is None:
                bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –§–°–ë')
                connect.commit()
            else:
                all_results = []
                for i in cursor.execute(f"SELECT * FROM users WHERE username = '{user_username}'"):
                    all_results += i
                connect.commit()
                bot.send_message(message.chat.id, f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {all_results[1]} üëÆ\
\n \
\n<b>–û —Å–µ–±–µ:</b> {all_results[2]}\
\n \
\n<b>Steam:</b> {all_results[3]}\
\n \
\n<b>Discord:</b> {all_results[4]}\
\n \
\n<b>VK:</b> {all_results[5]}\
\n \
\n<b>–Æ—Ç—É–±:</b> {all_results[6]}\
\n \
\n<b>Twitch:</b> {all_results[7]}\
\n \
\n<b>–¢–∏–∫–¢–æ–∫:</b> {all_results[13]}\
\n \
\n<b>Twitter:</b> {all_results[8]}", disable_web_page_preview=1, parse_mode='html')

        elif message.text.lower() == '—è':
            user_username = '@' + message.from_user.username
            cursor.execute(f"SELECT * FROM users WHERE username = '{user_username}'")
            connect.commit()
            if cursor.fetchone() is None:
                bot.send_message(message.chat.id, '–¢–µ–±—è –¥–∞–∂–µ –≤ –±–∞–∑–µ –Ω–µ—Ç. –ù–æ —ç—Ç–æ –ø–æ–ø—Ä–∞–≤–∏–º–æ...')
                db_profile(message)
            else:
                all_results = []
                for i in cursor.execute(f"SELECT * FROM users WHERE username = '{user_username}'"):
                    all_results += i
                connect.commit()
                bot.send_message(message.chat.id, f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, <b>{message.from_user.first_name} \
{last_name(message.from_user.last_name)}</b> üëÆ\
\n \
\n<b>–û —Å–µ–±–µ:</b> {all_results[2]}\
\n \
\n<b>Steam:</b> {all_results[3]}\
\n \
\n<b>Discord:</b> {all_results[4]}\
\n \
\n<b>VK:</b> {all_results[5]}\
\n \
\n<b>–Æ—Ç—É–±:</b> {all_results[6]}\
\n \
\n<b>Twitch:</b> {all_results[7]}\
\n \
\n<b>–¢–∏–∫–¢–æ–∫:</b> {all_results[13]}\
\n \
\n<b>Twitter:</b> {all_results[8]}", disable_web_page_preview=1, parse_mode='html')

        else:
            bot.send_message(message.chat.id, '–ù–æ—Ä–º–∞–ª—å–Ω–æ –≤–≤–µ–¥–∏ —á—Ç–æ —Å–∫–∞–∑–∞–Ω–æ, –¥–æ–¥–∏–∫')
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def about_profile(message):
    try:
        connect = sqlite3.connect('bot.db')
        cursor = connect.cursor()
        user_id = message.from_user.id
        cursor.execute(f"SELECT id FROM users WHERE id = '{user_id}'")
        if cursor.fetchone() is None:
            bot.send_message(message.chat.id, f"{message.from_user.first_name},–≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω—ã. –©–∞ —è –≤–∞—Å –≤–Ω–µ—Å—É –≤ –±–∞–∑—É \
–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=first())
            db_profile(message)
        else:
            about = message.text
            cursor.execute(f"UPDATE users SET About = '{about}' WHERE id = '{user_id}'")
            connect.commit()
            bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ \
—Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º —é–∑–µ—Ä–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–µ–º –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é', reply_markup=first())
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def steam_profile(message):
    try:
        if 'steamcommunity' in message.text:
            connect = sqlite3.connect('bot.db')
            cursor = connect.cursor()
            user_id = message.from_user.id
            cursor.execute(f"SELECT id FROM users WHERE id = '{user_id}'")
            if cursor.fetchone() is None:
                bot.send_message(message.chat.id, f"{message.from_user.first_name},–≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω—ã. –©–∞ —è –≤–∞—Å –≤–Ω–µ—Å—É –≤ \
–±–∞–∑—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=first())
                db_profile(message)
            else:
                steam = message.text
                cursor.execute(f"UPDATE users SET Steam = '{steam}' WHERE id = '{user_id}'")
                connect.commit()
                bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ \
—Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º —é–∑–µ—Ä–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–µ–º –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é', reply_markup=first())
        else:
            bot.send_message(message.chat.id, '–¢—ã –¥–∞—É–Ω, –¥–∞–∂–µ —Å—Å—ã–ª–∫—É –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–µ –º–æ–∂–µ—à—å', reply_markup=first())
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def vk_profile(message):
    try:
        if 'vk' in message.text:
            connect = sqlite3.connect('bot.db')
            cursor = connect.cursor()
            user_id = message.from_user.id
            cursor.execute(f"SELECT id FROM users WHERE id = '{user_id}'")
            if cursor.fetchone() is None:
                bot.send_message(message.chat.id, f"{message.from_user.first_name},–≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω—ã. –©–∞ —è –≤–∞—Å –≤–Ω–µ—Å—É –≤ \
–±–∞–∑—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=first())
                db_profile(message)
            else:
                vk = message.text
                cursor.execute(f"UPDATE users SET VK = '{vk}' WHERE id = '{user_id}'")
                connect.commit()
                bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ \
—Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º —é–∑–µ—Ä–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–µ–º –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é', reply_markup=first())
        else:
            bot.send_message(message.chat.id, '–¢—ã –¥–∞—É–Ω, –¥–∞–∂–µ —Å—Å—ã–ª–∫—É –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–µ –º–æ–∂–µ—à—å', reply_markup=first())
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def discord_profile(message):
    try:
        if '#' in message.text:
            connect = sqlite3.connect('bot.db')
            cursor = connect.cursor()
            user_id = message.from_user.id
            cursor.execute(f"SELECT id FROM users WHERE id = '{user_id}'")
            if cursor.fetchone() is None:
                bot.send_message(message.chat.id, f"{message.from_user.first_name},–≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω—ã. –©–∞ —è –≤–∞—Å –≤–Ω–µ—Å—É –≤ \
–±–∞–∑—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=first())
                db_profile(message)
            else:
                discord = message.text
                cursor.execute(f"UPDATE users SET Discord = '{discord}' WHERE id = '{user_id}'")
                connect.commit()
                bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ \
—Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º —é–∑–µ—Ä–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–µ–º –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é', reply_markup=first())
        else:
            bot.send_message(message.chat.id, '–í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å —Ç–µ–≥', reply_markup=first())
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def youtube_profile(message):
    try:
        if 'youtube.com/' in message.text:
            connect = sqlite3.connect('bot.db')
            cursor = connect.cursor()
            user_id = message.from_user.id
            cursor.execute(f"SELECT id FROM users WHERE id = '{user_id}'")
            if cursor.fetchone() is None:
                bot.send_message(message.chat.id, f"{message.from_user.first_name},–≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω—ã. –©–∞ —è –≤–∞—Å –≤–Ω–µ—Å—É –≤ \
–±–∞–∑—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=first())
                db_profile(message)
            else:
                cursor.execute(f"UPDATE users SET YouTube = '{message.text}' WHERE id = '{user_id}'")
                connect.commit()
                bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ \
—Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º —é–∑–µ—Ä–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–µ–º –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é', reply_markup=first())
        else:
            bot.send_message(message.chat.id, '–¢—ã –¥–∞—É–Ω, –¥–∞–∂–µ —Å—Å—ã–ª–∫—É –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–µ –º–æ–∂–µ—à—å', reply_markup=first())
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def twitch_profile(message):
    try:
        if 'twitch.tv' in message.text:
            connect = sqlite3.connect('bot.db')
            cursor = connect.cursor()
            user_id = message.from_user.id
            cursor.execute(f"SELECT id FROM users WHERE id = '{user_id}'")
            if cursor.fetchone() is None:
                bot.send_message(message.chat.id, f"{message.from_user.first_name},–≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω—ã. –©–∞ —è –≤–∞—Å –≤–Ω–µ—Å—É –≤ \
–±–∞–∑—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=first())
                db_profile(message)
            else:
                cursor.execute(f"UPDATE users SET Twitch = '{message.text}' WHERE id = '{user_id}'")
                connect.commit()
                bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ \
—Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º —é–∑–µ—Ä–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–µ–º –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é', reply_markup=first())
        else:
            bot.send_message(message.chat.id, '–¢—ã –¥–∞—É–Ω, –¥–∞–∂–µ —Å—Å—ã–ª–∫—É –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–µ –º–æ–∂–µ—à—å', reply_markup=first())
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def twitter_profile(message):
    try:
        if 'twitter.com' in message.text:
            connect = sqlite3.connect('bot.db')
            cursor = connect.cursor()
            user_id = message.from_user.id
            cursor.execute(f"SELECT id FROM users WHERE id = '{user_id}'")
            if cursor.fetchone() is None:
                bot.send_message(message.chat.id, f"{message.from_user.first_name},–≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω—ã. –©–∞ —è –≤–∞—Å –≤–Ω–µ—Å—É –≤ \
–±–∞–∑—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=first())
                db_profile(message)
            else:
                cursor.execute(f"UPDATE users SET Twitter = '{message.text}' WHERE id = '{user_id}'")
                connect.commit()
                bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ \
—Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º —é–∑–µ—Ä–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–µ–º –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é', reply_markup=first())
        else:
            bot.send_message(message.chat.id, '–¢—ã –¥–∞—É–Ω, –¥–∞–∂–µ —Å—Å—ã–ª–∫—É –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–µ –º–æ–∂–µ—à—å', reply_markup=first())
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def tic_tok_profile(message):
    try:
        connect = sqlite3.connect('bot.db')
        cursor = connect.cursor()
        user_id = message.from_user.id
        cursor.execute(f"SELECT id FROM users WHERE id = '{user_id}'")
        if cursor.fetchone() is None:
            bot.send_message(message.chat.id, f"{message.from_user.first_name},–≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω—ã. –©–∞ —è –≤–∞—Å –≤–Ω–µ—Å—É –≤ –±–∞–∑—É \
–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=first())
            db_profile(message)
        else:
            cursor.execute(f"UPDATE users SET Tic_Tok = '{message.text}' WHERE id = '{user_id}'")
            connect.commit()
            bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –ë–æ–ª—å—à–µ —Å—é–¥–∞ –Ω–µ –ø–∏—à–∏', reply_markup=first())
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def dollar_alerts(message):
    try:
        chat_id = message.chat.id
        if any(map(str.isdigit, message.text)):
            connect = sqlite3.connect('bot.db')
            cursor = connect.cursor()
            cursor.execute("""CREATE TABLE IF NOT EXISTS chats (
                id INTEGER 
            )""")
            connect.commit()
            cursor.execute(f"SELECT id FROM chats WHERE id = '{chat_id}'")
            if cursor.fetchone() is None:
                cursor.execute("INSERT INTO chats VALUES(?)", [chat_id])
                connect.commit()
            cursor.execute(f"SELECT id FROM chats WHERE id = '{chat_id}'")

            alert_time = int(''.join(filter(str.isdigit, message.text)))
            while True:
                resp_dollar = requests.get('https://coinmarketcap.com/ru/currencies/tether/').text
                soup = BeautifulSoup(resp_dollar, 'lxml')
                title_dollar = soup.find('div', {'class': 'priceValue'}).find('span')
                resp_euro = requests.get('https://coinmarketcap.com/ru/currencies/tether-eurt/').text
                soup = BeautifulSoup(resp_euro, 'lxml')
                title_euro = soup.find('div', {'class': 'priceValue'}).find('span')
                telegram.notify(token=config.TOKEN, chat_id=chat_id, message=f'üíµ = {title_dollar.get_text()} \
\nüí∂ = {title_euro.get_text()}')
                sleep(60*alert_time)
        else:
            telegram.notify(token=config.TOKEN, chat_id=chat_id, message='–ß–µ–ª, —Ü–∏—Ñ—Ä–∞–º–∏ —á–∏—Å–ª–æ –ø–∏—à–∏')
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


def btc_alerts(message):
    try:
        chat_id = message.chat.id
        if any(map(str.isdigit, message.text)):
            connect = sqlite3.connect('bot.db')
            cursor = connect.cursor()
            cursor.execute("""CREATE TABLE IF NOT EXISTS chats (
                id INTEGER
                dollar_alerts INTEGER
                btc_alerts INTEGER 
            )""")
            connect.commit()
            cursor.execute(f"SELECT id FROM chats WHERE id = '{chat_id}'")
            if cursor.fetchone() is None:
                cursor.execute("INSERT INTO chats VALUES(?, ?, ?)", [chat_id])
                connect.commit()

            cursor.execute(f"SELECT id FROM chats WHERE id = '{chat_id}'")

            alert_time = int(''.join(filter(str.isdigit, message.text)))
            while True:
                resp_btc = requests.get('https://coinmarketcap.com/currencies/bitcoin/').text
                soup_btc = BeautifulSoup(resp_btc, 'lxml')
                title_btc = soup_btc.find('div', {'class': 'priceValue'}).find('span')
                resp_eth = requests.get('https://coinmarketcap.com/currencies/ethereum/').text
                soup_eth = BeautifulSoup(resp_eth, 'lxml')
                title_eth = soup_eth.find('div', {'class': 'priceValue'}).find('span')
                telegram.notify(token=config.TOKEN, chat_id=chat_id, message=f'BTC = {title_btc.get_text()} \
\nETH = {title_eth.get_text()}')
                sleep(60*alert_time)
        else:
            telegram.notify(token=config.TOKEN, chat_id=chat_id, message='–ß–µ–ª, —Ü–∏—Ñ—Ä–∞–º–∏ —á–∏—Å–ª–æ –ø–∏—à–∏')
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


@bot.message_handler(commands=['all'])
def tag_all(message):
    try:
        db_chats(message)
        db_profile(message)
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))
    try:
        connect = sqlite3.connect('bot.db')
        cursor = connect.cursor()
        chat_id = message.chat.id
        all_results = []
        for i in cursor.execute(f"SELECT username FROM '{chat_id}'"):
            all_results += i
        connect.commit()
        msg = ' '.join(all_results)
        bot.send_message(message.chat.id, msg)
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


@bot.message_handler(commands=['profile'])
def profile(message):
    try:
        db_chats(message)
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))
    markup = types.InlineKeyboardMarkup(row_width=4)
    item0 = types.InlineKeyboardButton('–û —Å–µ–±–µ', callback_data='About')
    item1 = types.InlineKeyboardButton('Steam', callback_data='Steam')
    item2 = types.InlineKeyboardButton('Discord', callback_data='Discord')
    item3 = types.InlineKeyboardButton('VK', callback_data='VK')
    item4 = types.InlineKeyboardButton('YouTube', callback_data='YouTube')
    item5 = types.InlineKeyboardButton('Twitch', callback_data='Twitch')
    item6 = types.InlineKeyboardButton('Twitter', callback_data='Twitter')
    item7 = types.InlineKeyboardButton('Pinterest', callback_data='Pinterest')
    item8 = types.InlineKeyboardButton('Tg –∫–∞–Ω–∞–ª', callback_data='Tg_channel')
    item9 = types.InlineKeyboardButton('Epic Games', callback_data='Epic_Games')
    item10 = types.InlineKeyboardButton('–°–∞–π—Ç', callback_data='Site')
    item11 = types.InlineKeyboardButton('Tic Tok', callback_data='Tic_Tok')
    markup.add(item0, item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11)

    bot.send_message(message.chat.id, '–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å —Å–µ—Ä–≤–µ—Ä–∞?\
\n(–ü–æ–∫–∞ –Ω–µ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∞–º —Ç—ã–∫–∞–π –∏ –ø—Ä–æ–≤–µ—Ä—è–π)', reply_markup=markup)
    db_profile(message)


@bot.message_handler(commands=['start'])
def welcome(message):
    db_chats(message)
    sticker = open('jolyne.webp', 'rb')
    bot.send_sticker(message.chat.id, sticker)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç \
–≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π, –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –∏–∑ –∫–æ—Ç–æ—Ä–æ—ã—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!".format(message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=first())
    try:
        db_chats(message)
        db_profile(message)
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


@bot.message_handler(commands=['next'])  # –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def second(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–í–µ–∑–µ—Ä –†–µ–ø–æ—Ä—Ç–æ üå¶Ô∏è')
    item2 = types.KeyboardButton('YouTube –¥–ª—è –±–µ–¥–Ω—ã—Ö üéûÔ∏è')
    item3 = types.KeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üåê')
    item4 = types.KeyboardButton('–í—Ä–µ–º—è üï¢')
    item5 = types.KeyboardButton('–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ö—É–π–Ω—è ‚öô')
    item6 = types.KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©')

    markup.add(item1, item2, item3, item4, item5, item6)

    bot.send_message(message.chat.id, '–≠—Ç–æ –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π (–±–µ—Å)–ø–æ–ª–µ–∑–Ω–æ–π –ª–∞–±—É–¥—ã', reply_markup=markup)

    try:
        db_chats(message)
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


@bot.message_handler(commands=['weather'])  # –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–≥–æ–¥—ã
def weather(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–£–∫—Ä–∞–∏–Ω–∞ üá∫üá¶", callback_data='odessa')
    item2 = types.InlineKeyboardButton('–†–æ—Å—Å–∏—è üá∑üá∫', callback_data='piter')
    item3 = types.InlineKeyboardButton('–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω üá∞üáø', callback_data='astana')
    item4 = types.InlineKeyboardButton('–ê—Ä–º–µ–Ω–∏—è üá¶üá≤', callback_data='erevan')

    markup.add(item1, item2, item3, item4)

    bot.send_message(message.chat.id, '–í —Å—Ç–æ–ª–∏—Ü–µ –∫–∞–∫–æ–π –∏–∑ –≤–µ–ª–∏—á–∞–π—à–∏—Ö —Å—Ç—Ä–∞–Ω —à–∏–Ω–æ–±–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?',
                     reply_markup=markup)


@bot.message_handler(commands=['alerts'])
def alerts(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton('–ö—É—Ä—Å üí≤ –∏ ‚Ç¨', callback_data='dollar_alerts')
    item2 = types.InlineKeyboardButton('–ù–æ–≤–æ—Å—Ç–∏', callback_data='news_alerts')
    item3 = types.InlineKeyboardButton('–ö—É—Ä—Å BTC –∏ ETH', callback_data='btc_alerts')
    item4 = types.InlineKeyboardButton('–ü–æ–∫–∞ —Ö–∑', callback_data='else')
    markup.add(item1, item2, item3, item4)
    bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                     reply_markup=markup)


@bot.message_handler(commands=['youtube_search_start'])
def youtube_search_start(message):
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤–∏–¥–æ—Å–∏–∫–∏?')
    bot.register_next_step_handler(msg, youtube_search)


@bot.message_handler(commands=['news'])
def last_news_search(message):  # –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å —Å —Å–∞–π—Ç–∞ SVTV
    try:
        news_href = 'https://svtv.org/news/'
        driver.get(news_href)
        sleep(2)
        news = driver.find_element_by_class_name('card-news')
        bot.send_message(message.chat.id, news.get_attribute('href'))
    except Exception as e:
        bot.send_message(message.chat.id, '–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ —Ç–æ–≥–æ, —á—Ç–æ –ø–∏–¥–æ—Ä–∞—Å—ã –∏–∑ –†–æ—Å–ö–æ–º–ü–æ–∑–æ—Ä–∞ \
–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —Å–∞–π—Ç')
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


@bot.message_handler(commands=['time'])
def msk_time(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton('–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Å—ã', callback_data='time')
    markup.add(item1)
    bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (–≤–ø–ª–æ—Ç—å –¥–æ —Å–µ–∫—É–Ω–¥)',
                     reply_markup=markup)


@bot.message_handler(content_types=['text'])
def buttons(message):
    if message.text == '–ú–æ—è –¥–ª–∏–Ω–∞ üçÜ':
        if message.from_user.first_name == 'Evil Morty':
            bot.send_message(message.chat.id, str(random.randint(20, 30)) + ' —Å–º')
        elif message.from_user.username == 'SlayKas':
            bot.send_message(message.chat.id, str(random.randint(100000, 3000000)) + ' —Å–º')
        elif message.from_user.first_name == '–º—É{66]90]8¬≤‚Öõ>':
            bot.send_message(message.chat.id, '1 —Å–º')
        else:
            bot.send_message(message.chat.id, str(random.randint(0, 20)) + ' —Å–º')
    elif message.text == '–ö–∞–∫ –¥–µ–ª–∞?üòä':
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æüëç", callback_data='good')
        item2 = types.InlineKeyboardButton("–•—É–µ–≤–∞üëé", callback_data='bad')
        markup.add(item1, item2)
        bot.send_message(message.chat.id, '–ù—É —Ç–∞–∫–æ–µ —Å–µ–±–µ. –ê —Ç—ã –∫–∞–∫?', reply_markup=markup)
    elif message.text == '–ü–æ—Å–æ–≤–µ—Ç—É–π —Ñ–∏–ª—å–º üé•':
        bot.send_message(message.chat.id, '–í–∞–º –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ' + config.kino[(random.randint(0, 49))])
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ—É üìÇ':
        profile(message)
    elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ...üòè':
        msg = bot.send_message(message.chat.id, '–°–∫–∏–Ω—å—Ç–µ —é–∑–µ—Ä–Ω–µ–º (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @[username] ) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —è –≤—ã–≤–µ–ª–∞\
–µ–≥–æ –¥–∞–Ω–Ω—ã–µ. \n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–Ø", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        bot.register_next_step_handler(msg, info_profile)
    elif message.text == '–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ö—É–π–Ω—è ‚öô':
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ü§¢", callback_data='code')
        item2 = types.InlineKeyboardButton('–õ—É—á—à–∏–π –∫–∞–Ω–∞–ª –≤ –¢–ìüì±', callback_data='channel')
        item3 = types.InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –≤—Å–µ –æ —Å–µ–±–µüßë‚Äçüíº', callback_data='info')
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, '–°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ö—É–π–Ω–∏ –±—É–¥—É—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏',
                         reply_markup=markup)
    elif message.text == '–õ—É—á—à–µ–µ –∞–Ω–∏–º–µ':
        bot.send_message(message.chat.id, '–ì–ª—É–ø–æ —Å–ø–æ—Ä–∏—Ç—å –æ —Ç–æ–º, –∫–∞–∫–æ–µ –∞{–ù}–∏–º–µ –ª—É—á—à–µ, –∞ –∫{–ê}–∫–æ–µ —Ö—É–∂–µ. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–æ–º\
–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–Ω{–†}–æ–≤ –∏ –≤ –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö —Ç—ã—Å—è—á–∏ —Ç–∞–π—Ç–ª–æ–≤... –î–∞–∂–µ —è, –±–æ—Ç, –Ω–µ  —Å–ø–æ—Å–æ–±–µ–Ω –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö –≤—Å–µ. –ò –¥–∞–∂–µ –µ—Å–ª–∏\
 –±—ã –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ–ª, —Ç–æ —Å–æ–∑–¥–∞—Ç—å –æ–¥–Ω{–£}, –æ–±—ä–µ–∫—Ç–∏–≤–Ω—É—é –∏ –≤–µ—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ù–∏ –æ–¥–∏–Ω —Ç–æ–ø, —Ç–µ–º –±–æ–ª–µ–µ –µ—Å–ª–∏\
 –º—ã –≥–æ–≤–æ—Ä–∏–º –æ–± –∞–Ω–∏–º–µ, –Ω–µ –º–æ–∂–µ—Ç –æ—Ç—Ä–∞–∑–∏{–¢}—å —á—É–≤—Å—Ç–≤–∞ –∏ —ç–º–æ—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∞—Å. –Ø —Å—á–∏—Ç–∞—é, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø—Ä–æ—Å—Ç–æ –Ω–µ –∏–º–µ\
–µ—Ç —Å–º—ã—Å–ª–∞. –ö–∞–∂–¥—ã–π, –±—É–¥—å –æ–Ω —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –ª—é–±–∏–º—ã–µ –∏ –Ω–µ–ª—é–±–∏–º—ã–µ –≤–µ—â–∏. –õ—é–±–∏—Ç–µ, —Ç–æ \
—á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –∏ –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –≥–ª—É–ø—ã—Ö —Å—Ä–∞—á–µ–π! –£ –∫–∞–∂–¥–æ–≥{–û} —Å–≤–æ–∏ –≤–∫—É—Å—ã!‚ù§')
    elif message.text == '–î–∞–ª—å—à–µ ‚û°':
        second(message)
    elif message.text == '–í–µ–∑–µ—Ä –†–µ–ø–æ—Ä—Ç–æ üå¶Ô∏è':
        weather(message)
    elif message.text == 'YouTube –¥–ª—è –±–µ–¥–Ω—ã—Ö üéûÔ∏è':
        youtube_search_start(message)
    elif message.text == 'üë©‚Äçüíª–ú–æ–π ID':
        bot.send_message(message.chat.id, f'–í–∞—à ID: {message.from_user.id}')
    elif message.text == 'ü¶ß–ú–æ–π —é–∑–µ—Ä–Ω–µ–π–º':
        bot.send_message(message.chat.id, f'–í–∞—à username: @{message.from_user.username}')
    elif message.text == 'üà¥–ú–æ–µ –∏–º—è (–Ω–µ –∞–Ω–∏–º–µ)':
        if message.from_user.last_name == 'None':
            bot.send_message(message.chat.id, f'–í–∞—à –Ω–∏–∫: {message.from_user.first_name}')
        else:
            bot.send_message(message.chat.id, f'–í–∞—à –Ω–∏–∫: {message.from_user.first_name} {message.from_user.last_name}')
    elif message.text == '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üåê':
        last_news_search(message)
    elif message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üåê':
        alerts(message)
    elif message.text == '–í—Ä–µ–º—è üï¢' or message.text.lower() == '–≤—Ä–µ–º—è':
        msk_time(message)
    elif message.text == '–ù–∞–∑–∞–¥ ‚Ü©':
        bot.send_message(message.chat.id, '–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π', reply_markup=first())
    elif ('@all' in message.text) or ('@everyone' in message.text):
        tag_all(message)
    else:
        pass


def youtube_search(message):  # –ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ —é—Ç—É–±–µ
    try:
        bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É (—á–µ–ª, –º–æ–≥ –±—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞ —é—Ç—É–± –∑–∞–π—Ç–∏)')
        video_href = 'https://www.youtube.com/results?search_query=' + message.text
        driver.get(video_href)
        sleep(2)
        videos = driver.find_elements_by_id('video-title')
        for i in range(len(videos)):
            bot.send_message(message.chat.id, videos[i].get_attribute('href'))
            if i == 4:
                break
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            try:
                db_chats(call.message)
                db_profile(call.message)
            except Exception as e:
                print(repr(e))
                telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–æ')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–°–æ–±–æ–ª–µ–∑–Ω—É—é')
            elif call.data == 'code':
                bot.send_message(call.message.chat.id, 'PasteBin(–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç–∞–º –∫–∞–∫–∏–µ-—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã —Ä—É–≥–∞—é—Ç—Å—è \
–Ω–∞ –û–ü–ê–°–ù–´–ô –ö–û–ù–¢–ï–ù–¢ (–Ω—É —Ç–∞–∫–æ–π –∫–æ–ª—Ö–æ–∑–Ω—ã–π –∫–æ–¥ –∏ –ø—Ä–∞–≤–¥–∞ –æ–ø–∞—Å–µ–Ω): https://pastebin.com/nG04h1KZ \nGitHub(—Ç—É—Ç –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å\
): https://github.com/thommmasss/jolyne.bot/blob/main/main.py')
            elif call.data == 'channel':
                bot.send_message(call.message.chat.id,
                                 '–ù–∞ –º–æ–π —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –¥–≤–æ–∏—á–Ω—ã–π –≤–∑–≥–ª—è–¥, –ª—É—á—à–∏–π –∫–∞–Ω–∞–ª —ç—Ç–æ:\n @dramaturgT')
            elif call.data == 'info':
                markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item_id = types.KeyboardButton('üë©‚Äçüíª–ú–æ–π ID')
                item_name = types.KeyboardButton('üà¥–ú–æ–µ –∏–º—è (–Ω–µ –∞–Ω–∏–º–µ)')
                item_username = types.KeyboardButton('ü¶ß–ú–æ–π —é–∑–µ—Ä–Ω–µ–π–º')
                item_start = types.KeyboardButton('/start')

                markup_reply.add(item_id, item_username, item_name, item_start)
                bot.send_message(call.message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è —Ä–∞—Å—Å–∫–∞–∑–∞–ª –æ –í–∞—Å (–∏ –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ \
–≤ —Ñ—Å–±)?', reply_markup=markup_reply)
            elif call.data == 'odessa':
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                resp = requests.get('https://www.gismeteo.ru/weather-odessa-4982/', headers=headers).text
                soup = BeautifulSoup(resp, 'html.parser')
                title = soup.find('span', class_='unit_temperature_c')
                bot.send_message(call.message.chat.id, f'–ü–æ–≥–æ–¥–∞ –≤ –û–¥–µ—Å—Å–µ:\n {title.get_text()} C')

            elif call.data == 'piter':
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                resp = requests.get('https://www.gismeteo.by/weather-sankt-peterburg-4079/', headers=headers).text
                soup = BeautifulSoup(resp, 'html.parser')
                title = soup.find('span', class_='unit_temperature_c')
                bot.send_message(call.message.chat.id, f'–ü–æ–≥–æ–¥–∞ –≤ –†–∞–∑—á–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥–µ:\n {title.get_text()} C')

            elif call.data == 'astana':
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                resp = requests.get('https://www.gismeteo.by/weather-nur-sultan-5164/', headers=headers).text
                soup = BeautifulSoup(resp, 'html.parser')
                title = soup.find('span', class_='unit_temperature_c')
                bot.send_message(call.message.chat.id, f'–ü–æ–≥–æ–¥–∞ –≤ –ê—Å—Ç–∞–Ω–µ:\n {title.get_text()} C')

            elif call.data == 'erevan':
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                resp = requests.get('https://www.gismeteo.by/weather-yerevan-5298/', headers=headers).text
                soup = BeautifulSoup(resp, 'html.parser')
                title = soup.find('span', class_='unit_temperature_c')
                bot.send_message(call.message.chat.id, f'–ü–æ–≥–æ–¥–∞ –≤ –ï—Ä–µ–≤–∞–Ω–µ:\n {title.get_text()} C')
            elif call.data == 'time':
                while True:
                    sleep(1)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"\
–¢–æ—á–Ω–æ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: \n {time.strftime('%m/%d/%Y, %H:%M:%S')}")
            elif call.data == 'bad' or call.data == 'good':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ù–∞ \
—Å–∞–º–æ–º –¥–µ–ª–µ –º–Ω–µ –≥–ª—É–±–æ—á–∞–π—à–µ –≤—Å–µ —Ä–∞–≤–Ω–æ, –ø—Ä–æ—Å—Ç–æ —è –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞üòò", reply_markup=None)
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
            # –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            elif call.data == 'About':
                msg = bot.send_message(call.message.chat.id, '–ü–∏—à–∏ —Ç—É—Ç —á–æ —Ö–æ—á–µ—à—å (–≥–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä \
–∫–∞—Ä—Ç—ã, –ø–∏–Ω-–∫–æ–¥, –∏–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã (—Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º), —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏ CVC-–∫–æ–¥ (—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç—ã)')
                bot.register_next_step_handler(msg, about_profile)
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
            elif call.data == 'Steam':
                msg = bot.send_message(call.message.chat.id, '–°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∞–∫–∫ –≤ –°—Ç–∏–º–µ \
(–≤ —Ñ–æ—Ä–º–∞—Ç–µ https://steamcommunity.com/id/[id –ø—Ä–æ—Ñ–∏–ª—è])', disable_web_page_preview=1)
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
                bot.register_next_step_handler(msg, steam_profile)
            elif call.data == 'Discord':
                msg = bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ \
–≤ –î–∏—Å–∫–æ—Ä–¥–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ [–Ω–∏–∫]#[—Ç–µ–≥])')
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
                bot.register_next_step_handler(msg, discord_profile)
            elif call.data == 'VK':
                msg = bot.send_message(call.message.chat.id, '–°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∞–∫–∫ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ \
(–≤ —Ñ–æ—Ä–º–∞—Ç–µ vk.com/[id –ø—Ä–æ—Ñ–∏–ª—è])', disable_web_page_preview=1)
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
                bot.register_next_step_handler(msg, vk_profile)
            elif call.data == 'YouTube':
                msg = bot.send_message(call.message.chat.id, '–°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª –Ω–∞ –Æ—Ç—É–±–µ \
(–≤ —Ñ–æ—Ä–º–∞—Ç–µ youtube.com/channel/[id])', disable_web_page_preview=1)
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
                bot.register_next_step_handler(msg, youtube_profile)
            elif call.data == 'Twitch':
                msg = bot.send_message(call.message.chat.id, '–°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª –Ω–∞ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ–π –ø–æ–º–æ–π–∫–µ, \
–æ–π, –¢–≤–∏—á–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ twitch.tv/[id –∫–∞–Ω–∞–ª–∞])', disable_web_page_preview=1)
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
                bot.register_next_step_handler(msg, twitch_profile)
            elif call.data == 'Twitter':
                msg = bot.send_message(call.message.chat.id, '–ö–∞–ø–µ—Ü, –∫—Ç–æ —Ç—ã –≤–æ–æ–±—â–µ —Ç–∞–∫–æ–π, —á—Ç–æ —Å–∏–¥–∏—à—å –≤ –¢–≤–∏—Ç–æ—Ä–µ? \
–ù—É —Å–∫–∏–¥—ã–≤–∞–π —Å—Å—ã–ª–æ—á–∫—É –Ω–∞ –∞–∫–∫ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ twitter.com/[id –∞–∫–∫–∞])', disable_web_page_preview=1)
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
                bot.register_next_step_handler(msg, twitter_profile)
            elif call.data == 'Tic_Tok':
                msg = bot.send_message(call.message.chat.id, '–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –≤ –¥—É—à–µ –Ω–µ –µ–±—É, –∫–∞–∫ –≤ —ç—Ç–æ–º —Ç–∏–∫—Ç–∞–∫–µ \
–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∞–∫–∫–∏. –ü–∏—à–∏ —á–æ —Ö–æ—á–µ—à—å, –Ω–æ –ª—É—á—à–µ –Ω–µ –ø–∏—à–∏)')
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
                bot.register_next_step_handler(msg, tic_tok_profile)
            elif call.data == 'btc_alerts':
                msg = bot.send_message(call.message.chat.id, '–†–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤–∞–∑ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã?')
                bot.register_next_step_handler(msg, btc_alerts)
            elif call.data == 'dollar_alerts':
                msg = bot.send_message(call.message.chat.id, '–†–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤–∞–∑ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã?')
                bot.register_next_step_handler(msg, dollar_alerts)
            else:
                bot.send_message(call.message.chat.id, '–¢–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç')
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


@atexit.register
def bot_offline():
    try:
        connect = sqlite3.connect('bot.db')
        cursor = connect.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS chats (
            id INTEGER
        )""")
        connect.commit()
        all_results = []
        cursor.execute("SELECT id FROM chats")
        for i in cursor.execute("SELECT id FROM chats"):
            all_results += i
        connect.commit()
        for i in range(0, len(all_results)):
            telegram.notify(token=config.TOKEN, chat_id=all_results[i], message="–Ø –ø–æ—à–ª–∞ —Å–ø–∞—Ç—åüò¥")
        cursor.close()
        connect.close()
    except Exception as e:
        print(repr(e))
        telegram.notify(token=config.TOKEN, chat_id=config.admin_id, message=repr(e))


# RUN
bot.polling(none_stop=True)
bot.user(can_join_groups=True)
bot.user(can_read_all_group_messages=True)
